name: Release

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - 'release/**'
      - 'hotfix/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  JAVA_VERSION: '24'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG=${{ github.event.inputs.tag }}
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $VERSION =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          echo "Release version: $VERSION"
          echo "Is prerelease: $([ "$VERSION" != "${VERSION%-*}" ] && echo true || echo false)"

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run tests
        run: ./gradlew test

      - name: Generate code coverage report
        run: ./gradlew koverXmlReport

      - name: Build application
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app/build/libs/*.jar
            **/build/reports/kover/report.xml
          retention-days: 30

  build-native-image:
    name: Build Native Image
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build native image
        run: ./gradlew :app:nativeCompile
        env:
          SPRING_AOT_ENABLED: true

      - name: Upload native binary
        uses: actions/upload-artifact@v4
        with:
          name: native-binary
          path: app/build/native/nativeCompile/
          retention-days: 30

  build-docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [ validate, build-and-test ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v6
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=rc-{{branch}},enable={{is_default_branch == false}}
          labels: |
            org.opencontainers.image.title=Kotlin Spring Boot Starter
            org.opencontainers.image.description=Modern Kotlin Spring Boot application starter
            org.opencontainers.image.vendor=Template Project

      - name: Build and push Docker image
        run: |
          ./gradlew :app:bootBuildImage \
            --imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }} \
            --publishImage

      - name: Tag additional versions
        run: |
          TAGS="${{ steps.meta.outputs.tags }}"
          for tag in $TAGS; do
            if [ "$tag" != "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}" ]; then
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }} $tag
              docker push $tag
            fi
          done

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ validate, build-and-test, build-native-image, build-docker-image ]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts

      - name: Download native binary
        uses: actions/download-artifact@v4
        with:
          name: native-binary
          path: ./native

      - name: Generate release notes
        id: release-notes
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract version-specific changes from CHANGELOG.md if it exists
            awk '/^## \[${{ needs.validate.outputs.version }}\]/{flag=1;next}/^## \[/{flag=0}flag' CHANGELOG.md > release-notes.md
          else
            # Generate basic release notes from git commits
            echo "## Changes" > release-notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          bodyFile: release-notes.md
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          artifacts: |
            artifacts/app/build/libs/*.jar
            native/app
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        if: needs.validate.outputs.is-prerelease == 'false'
        run: |
          git tag -f latest
          git push -f origin latest