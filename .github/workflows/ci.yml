name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
      - develop
      - 'release/**'
      - 'hotfix/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - main
      - develop
      - 'release/**'
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2048m -Dorg.gradle.daemon=false -Dkotlin.incremental=false"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  pull-requests: write
  checks: write

jobs:
  # ==================== VALIDATION ====================
  validate:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

  # ==================== CODE QUALITY ====================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

      - name: Check code formatting
        run: ./gradlew spotlessCheck

      - name: Generate documentation
        if: ${{ github.ref == 'refs/heads/develop' || contains(github.ref, 'release/') }}
        run: ./gradlew dokkaHtml

  # ==================== TESTING ====================
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !inputs.skip-tests }}
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

      - name: Run tests with coverage
        run: ./gradlew test koverXmlReport koverHtmlReport

      - name: Upload test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'
          check_name: Test Results

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: '**/build/reports/kover/report.xml'
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # ==================== BUILD ====================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [ validate, code-quality, test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

      - name: Build application
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            app/build/libs/*.jar
          retention-days: 7

  # ==================== CONTAINER BUILD ====================
  container:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: |
      github.event_name == 'push' && (
        github.ref == 'refs/heads/master' || 
        github.ref == 'refs/heads/main' || 
        github.ref == 'refs/heads/develop' || 
        startsWith(github.ref, 'refs/heads/release/') || 
        startsWith(github.ref, 'refs/heads/hotfix/') || 
        startsWith(github.ref, 'refs/tags/v')
      )
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'liberica'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Build and push container image
        run: |
          ./gradlew bootBuildImage \
            --imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            --publishImage

  # ==================== RELEASE ====================
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.jar
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}

  # ==================== SUMMARY ====================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [ code-quality, test, build ]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## ðŸš€ Build Results
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${{ needs.code-quality.result }} |
            | Tests | ${{ needs.test.result }} |
            | Build | ${{ needs.build.result }} |`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });