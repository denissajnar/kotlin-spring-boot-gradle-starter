name: Code Quality

on:
  pull_request:
    branches: [ master, develop, 'feature/*', 'hotfix/*', 'release/*' ]
    paths:
      - '**/*.kt'
      - '**/*.kts'
      - '**/build.gradle.kts'
  push:
    branches: [ master, develop, 'feature/*', 'hotfix/*', 'release/*' ]
    paths:
      - '**/*.kt'
      - '**/*.kts'
      - '**/build.gradle.kts'
  workflow_dispatch:

jobs:
  code-formatting:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Run Spotless format check
        run: ./gradlew spotlessCheck --no-daemon

      - name: Run KtLint check
        run: ./gradlew ktlintCheck --no-daemon

      - name: Generate KtLint report
        if: failure()
        run: ./gradlew ktlintFormat --dry-run --no-daemon || true

      - name: Upload KtLint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ktlint-reports
          path: |
            **/build/reports/ktlint/
          retention-days: 7

      - name: Comment PR with formatting issues
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”§ Code Formatting Issues Found
            
              Your code has formatting issues that need to be fixed. Please run the following commands to automatically fix them:
            
              \`\`\`bash
              ./gradlew spotlessApply
              ./gradlew ktlintFormat
              \`\`\`
            
              After running these commands, commit and push the changes.`
            })

  documentation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: Generate Dokka documentation
        run: ./gradlew dokkaHtmlMultiModule --no-daemon

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: build/dokka/
          retention-days: 30

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/dokka/
          publish_branch: gh-pages
          commit_message: 'Deploy API documentation'

  code-metrics:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Java 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: Generate code coverage report
        run: |
          ./gradlew test --no-daemon
          ./gradlew koverXmlReport koverHtmlReport --no-daemon

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./build/reports/kover/report.xml
          flags: unittests
          name: code-quality-coverage
          fail_ci_if_error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            build/reports/kover/
          retention-days: 30

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Comment PR with coverage info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = fs.readFileSync('build/reports/kover/report.xml', 'utf8');
              const coverageMatch = coverage.match(/line-rate="([^"]+)"/);
              if (coverageMatch) {
                const percentage = Math.round(parseFloat(coverageMatch[1]) * 100);
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ðŸ“Š Code Coverage Report
            
                  Current coverage: **${percentage}%**
            
                  Coverage report is available in the artifacts of this workflow run.`
                });
              }
            } catch (error) {
              console.log('Could not read coverage report:', error.message);
            }