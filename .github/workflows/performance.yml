name: Performance Testing

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Mondays at 4:00 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  JAVA_VERSION: '24'

jobs:
  build-app:
    name: Build Application for Testing
    runs-on: ubuntu-latest
    outputs:
      jar-name: ${{ steps.build.outputs.jar-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build application
        id: build
        run: |
          ./gradlew :app:bootJar
          JAR_NAME=$(ls app/build/libs/*.jar | head -n1 | xargs basename)
          echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT

      - name: Upload application JAR
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: app/build/libs/*.jar
          retention-days: 1

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: build-app
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Download application JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: ./app

      - name: Start application
        run: |
          java -jar ./app/${{ needs.build-app.outputs.jar-name }} &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 30  # Wait for application to start
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: test
          SPRING_PROFILES_ACTIVE: test

      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8080/actuator/health; then
              echo "Application is ready"
              break
            fi
            echo "Waiting for application... attempt $i"
            sleep 2
          done

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Create load test configuration
        run: |
          cat > load-test.yml << EOF
          config:
            target: http://localhost:8080
            phases:
              - duration: 60
                arrivalRate: 5
                name: Warm up
              - duration: 120
                arrivalRate: 10
                name: Ramp up load
              - duration: 300
                arrivalRate: 25
                name: Sustained load
            processor: "./test-functions.js"
          scenarios:
            - name: Health check
              weight: 20
              flow:
                - get:
                    url: "/actuator/health"
            - name: Application info
              weight: 80
              flow:
                - get:
                    url: "/actuator/info"
          EOF

      - name: Create test functions
        run: |
          cat > test-functions.js << 'EOF'
          module.exports = {
            setRandomId: function(requestParams, context, ee, next) {
              context.vars.randomId = Math.floor(Math.random() * 1000000);
              return next();
            }
          };
          EOF

      - name: Run load tests
        run: |
          artillery run load-test.yml --output load-test-results.json
        continue-on-error: true

      - name: Generate load test report
        run: |
          artillery report load-test-results.json --output load-test-report.html
        continue-on-error: true

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html
          retention-days: 30

      - name: Stop application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Download application JAR
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: ./app

      - name: Run memory profiling
        run: |
          # Start application with memory profiling flags
          java -XX:+HeapDumpOnOutOfMemoryError \
               -XX:HeapDumpPath=./heap-dump.hprof \
               -XX:+PrintGC \
               -XX:+PrintGCDetails \
               -XX:+PrintGCTimeStamps \
               -Xloggc:gc.log \
               -jar ./app/${{ needs.build-app.outputs.jar-name }} &
          APP_PID=$!
          
          # Wait for startup
          sleep 30
          
          # Generate some load to trigger memory usage
          for i in {1..100}; do
            curl -f http://localhost:8080/actuator/health >/dev/null 2>&1 || true
          done
          
          # Let it run for a bit
          sleep 60
          
          # Stop application
          kill $APP_PID || true
          sleep 10
        env:
          SPRING_PROFILES_ACTIVE: test
        continue-on-error: true

      - name: Upload memory profiling results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: memory-profiling-results
          path: |
            gc.log
            heap-dump.hprof
          retention-days: 7

  benchmark-tests:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'liberica'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run JMH benchmarks
        run: ./gradlew jmh
        continue-on-error: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: |
            **/build/reports/jmh/
            **/build/results/jmh/
          retention-days: 30

  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [ load-testing, benchmark-tests ]
    steps:
      - name: Download current results
        uses: actions/download-artifact@v4
        with:
          pattern: "*-results"
          merge-multiple: true

      - name: Comment performance results on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: performance-results
          message: |
            ## ðŸš€ Performance Test Results
            
            Performance tests have been completed for this PR.
            
            **Load Testing**: Check the artifacts for detailed load test reports
            **Memory Profiling**: GC logs and heap dumps available in artifacts
            **Benchmarks**: JMH benchmark results available in artifacts
            
            Please review the performance impact before merging.